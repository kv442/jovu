/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Priority as PrismaPriority,
  Ticket as PrismaTicket,
} from "@prisma/client";

export class PriorityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PriorityCountArgs, "select">): Promise<number> {
    return this.prisma.priority.count(args);
  }

  async priorities(
    args: Prisma.PriorityFindManyArgs
  ): Promise<PrismaPriority[]> {
    return this.prisma.priority.findMany(args);
  }
  async priority(
    args: Prisma.PriorityFindUniqueArgs
  ): Promise<PrismaPriority | null> {
    return this.prisma.priority.findUnique(args);
  }
  async createPriority(
    args: Prisma.PriorityCreateArgs
  ): Promise<PrismaPriority> {
    return this.prisma.priority.create(args);
  }
  async updatePriority(
    args: Prisma.PriorityUpdateArgs
  ): Promise<PrismaPriority> {
    return this.prisma.priority.update(args);
  }
  async deletePriority(
    args: Prisma.PriorityDeleteArgs
  ): Promise<PrismaPriority> {
    return this.prisma.priority.delete(args);
  }

  async findTickets(
    parentId: string,
    args: Prisma.TicketFindManyArgs
  ): Promise<PrismaTicket[]> {
    return this.prisma.priority
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tickets(args);
  }
}
