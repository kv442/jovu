/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Priority } from "./Priority";
import { PriorityCountArgs } from "./PriorityCountArgs";
import { PriorityFindManyArgs } from "./PriorityFindManyArgs";
import { PriorityFindUniqueArgs } from "./PriorityFindUniqueArgs";
import { CreatePriorityArgs } from "./CreatePriorityArgs";
import { UpdatePriorityArgs } from "./UpdatePriorityArgs";
import { DeletePriorityArgs } from "./DeletePriorityArgs";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { PriorityService } from "../priority.service";
@graphql.Resolver(() => Priority)
export class PriorityResolverBase {
  constructor(protected readonly service: PriorityService) {}

  async _prioritiesMeta(
    @graphql.Args() args: PriorityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Priority])
  async priorities(
    @graphql.Args() args: PriorityFindManyArgs
  ): Promise<Priority[]> {
    return this.service.priorities(args);
  }

  @graphql.Query(() => Priority, { nullable: true })
  async priority(
    @graphql.Args() args: PriorityFindUniqueArgs
  ): Promise<Priority | null> {
    const result = await this.service.priority(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Priority)
  async createPriority(
    @graphql.Args() args: CreatePriorityArgs
  ): Promise<Priority> {
    return await this.service.createPriority({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Priority)
  async updatePriority(
    @graphql.Args() args: UpdatePriorityArgs
  ): Promise<Priority | null> {
    try {
      return await this.service.updatePriority({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Priority)
  async deletePriority(
    @graphql.Args() args: DeletePriorityArgs
  ): Promise<Priority | null> {
    try {
      return await this.service.deletePriority(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Ticket], { name: "tickets" })
  async findTickets(
    @graphql.Parent() parent: Priority,
    @graphql.Args() args: TicketFindManyArgs
  ): Promise<Ticket[]> {
    const results = await this.service.findTickets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
